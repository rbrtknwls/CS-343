1bi) The output is different between both as in the original we call destructors, and in the new version we don't.
This is because when throw leaves a scope it will automatically call all destructors and we dont do this with
jumps.

1bii) This is the output we get when running the following
(Running the function /usr/bin/time -f "%Uu %Ss %E" ./abx 13 13 103 28):

Throw Catch     (with compiler optimization): 54.45u
Throw Catch  (without compiler optimization): 56.66u

Long Jump       (with compiler optimization): 11.01u
Long Jump    (without compiler optimization): 11.58u

1biii) The original program preforms far worse then long jmp. This is because setjmp() is much faster then a try block
and catch is much slower then a longjmp(). Moreover since we explicitly know where we are jumping too each time we can
do it in O(1) time wheres a catch will need to propagate for about O(n) time.

1biiii) Since have so many exceptions and catches all of which occur at different states on the stack (as we catch
at each layer of recursion) it means that the compiler cant optimize well and so turning on compiler optimization makes
very little difference. We still see that long jump preforms very well in comparison to throw catch.